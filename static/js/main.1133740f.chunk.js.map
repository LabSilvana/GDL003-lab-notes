{"version":3,"sources":["config/config.js","Note/Note.jsx","NoteForm/NoteForm.jsx","Pages/Notes.jsx","NoteSignIn/NoteSignIn.jsx","NoteRou/NoteRou.jsx","App.js","serviceWorker.js","index.js"],"names":["DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Note","props","noteContent","noteId","handleRemove","bind","window","confirm","this","removeNote","className","onClick","React","Component","NoteForm","addNote","textInput","value","focus","ref","input","placeholder","type","Notes","state","notes","app","firebase","initializeApp","db","database","child","on","snap","push","key","val","setState","i","length","splice","remove","note","set","map","AppSignIn","isSignedIn","uiConfig","signInFlow","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","firebaseAuth","AppRouter","path","exact","component","NotesSignIn","App","NoteRou","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1133740f.chunk.js","sourcesContent":["export const DB_CONFIG = {\n    apiKey: \"AIzaSyB5omm6vkDXK5tv4qv-4kMw7Ob1XLkkLJQ\",\n    authDomain: \"notesreact-12cc5.firebaseapp.com\",\n    databaseURL: \"https://notesreact-12cc5.firebaseio.com\",\n    projectId: \"notesreact-12cc5\",\n    storageBucket: \"notesreact-12cc5.appspot.com\",\n    messagingSenderId: \"623049857137\",\n}","import React from 'react';\nimport './Note.css';\n\n\nclass Note extends React.Component{\n\n    constructor(props) {\n      super(props);\n      this.noteContent = props.noteContent;\n      this.noteId = props.noteId;  \n\n      this.handleRemove = this.handleRemove.bind(this);\n    }\n\n    handleRemove(){\n      const response = window.confirm('Estas seguro de eliminar?')\n      if (response) {\n        this.props.removeNote(this.noteId);\n      } \n    }\n\n    render(){\n       return(\n        <div className=\"Note\">\n        <span\n        onClick = {this.handleRemove}\n        >&times;</span>\n        <p>{this.noteContent}</p>\n\n        </div>\n       )\n    }\n}\n\nexport default Note;","import React from 'react';\nimport './NoteForm.css';\n\nclass NoteForm extends React.Component{\n\n    constructor() {\n      super();\n      this.addNote = this.addNote.bind(this);\n    }\n\n    addNote(){\n        this.props.addNote(this.textInput.value);\n        this.textInput.value = '';\n        this.textInput.focus(); \n    }\n\n    render(){\n       return(\n        <div className=\"NoteForm\">\n        <input\n        ref={input => {this.textInput = input;}}\n        placeholder=\"Write a note\" \n        type=\"text\"/>\n\n         <button\n         onClick={this.addNote}\n         >\n             Add Note\n         </button>\n    </div>\n       )\n    }\n}\n\nexport default NoteForm;\n","import React, { Component } from 'react';\n\nimport firebase from 'firebase';\nimport { DB_CONFIG } from '../config/config';\nimport 'firebase/database';\n\nimport Note from '../Note/Note';\nimport NoteForm from '../NoteForm/NoteForm';\n\nclass Notes extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      notes: [\n        //{noteId: 1, noteContent: 'note1'},\n        //{noteId: 2, noteContent: 'note2'},\n      ]\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.db = this.app.database().ref().child('notes');\n\n    this.addNote = this.addNote.bind(this);\n    this.removeNote = this.removeNote.bind(this);\n  }\n\n  componentDidMount() {\n    const { notes } = this.state;\n\n    this.db.on('child_added', snap => {\n      notes.push({\n        noteId: snap.key,\n        noteContent: snap.val().noteContent\n      })\n      this.setState({notes});\n    });\n    this.db.on('child_removed', snap => {\n      for(let i = 0; i < notes.length; i ++){\n        if (notes[i].noteId === snap.key) {\n          notes.splice(i, 1);\n        }\n      }\n      this.setState({notes});\n    });\n  }\n\n  removeNote(noteId) {\n    this.db.child(noteId).remove();\n  }\n\n  addNote(note) {\n    /*let { notes } = this.state;\n    notes.push({\n      noteId: note.length + 1,\n      noteContent: note\n    });\n    this.setState({ notes });*/\n\n    this.db.push().set({noteContent: note});\n     \n  }\n\n  render() {\n  return (\n      <div className=\"notesContainer\">\n        \n          <div className=\"notesHeader\">\n            <h1>Sil-Notes</h1>\n          </div>\n          \n          <div className=\"notesBody\">\n            <NoteForm addNote={this.addNote}/>\n          </div>\n\n          <div className=\"notesFooter\">\n          {\n            \n              this.state.notes.map(note =>{\n                return(\n                  <Note\n                  noteContent={note.noteContent}\n                  noteId={note.noteId}\n                  key={note.noteId}\n                  removeNote={this.removeNote}\n                  />\n                )\n              })\n              \n          }\n           \n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Notes;\n","import React from 'react';\nimport firebase from 'firebase';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nfirebase.initializeApp({\n    apiKey:\"AIzaSyB5omm6vkDXK5tv4qv-4kMw7Ob1XLkkLJQ\",\n    authDomain:\"notesreact-12cc5.firebaseapp.com\"\n})\n\nclass AppSignIn extends React.Component{\n    state = { isSignedIn: false }\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            signInSuccess: () => false\n        }\n    }\n\n    componentDidMount = () => {\n       firebase.auth().onAuthStateChanged(user => {\n            this.setState({isSignedIn:!!user})\n        })\n    }\n\n    \n    render() {\n        return (\n            <div className=\"App\">\n                {this.state.isSignedIn ? (\n                    <div>Signed In!</div>\n                    ) : (\n                        <StyledFirebaseAuth \n                        uiConfig={this.uiConfig} \n                        firebaseAuth={firebase.auth()}\n                        />\n                )}\n            </div>\n        )\n    }\n}\n\n   \n  \n  \n  \n  \n  export default AppSignIn;\n  \n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Notes from '../Pages/Notes';\nimport NotesSignIn from '../NoteSignIn/NoteSignIn';\n\nfunction AppRouter() {\n  return (\n    <Router>\n        <Route path=\"/\" exact component={NotesSignIn} />\n        <Route path=\"/notes/\" component={Notes} />\n    </Router>\n  );\n}\n\nexport default AppRouter;","import React from 'react';\nimport './App.css';\nimport NoteRou from './NoteRou/NoteRou';\n\n//import AppSignIn from './NoteSignIn/NoteSignIn'\n\nclass App extends React.Component{\n\n  render() {\n  return (\n     <NoteRou />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}